; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/fs_tests/array_alias_2.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/fs_tests/array_alias_2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.MyStruct = type { i32*, i32*, float* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32, i8*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %3)
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %6 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 {
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x %struct.MyStruct], align 16
  %3 = alloca [2 x i32*], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  store i32 0, i32* %1, align 4
  %10 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 0
  %11 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %10, i32 0, i32 0
  store i32* %4, i32** %11, align 16
  %12 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 0
  %13 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %12, i32 0, i32 1
  store i32* %6, i32** %13, align 8
  %14 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 0
  %15 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %14, i32 0, i32 2
  store float* %8, float** %15, align 16
  %16 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %17 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %16, i32 0, i32 0
  store i32* %5, i32** %17, align 8
  %18 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %19 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %18, i32 0, i32 1
  store i32* %7, i32** %19, align 8
  %20 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %21 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %20, i32 0, i32 2
  store float* %9, float** %21, align 8
  %22 = getelementptr inbounds [2 x i32*], [2 x i32*]* %3, i64 0, i64 0
  store i32* %6, i32** %22, align 16
  %23 = getelementptr inbounds [2 x i32*], [2 x i32*]* %3, i64 0, i64 1
  store i32* %7, i32** %23, align 8
  %24 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 0
  %25 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %24, i32 0, i32 0
  %26 = load i32*, i32** %25, align 16
  %27 = bitcast i32* %26 to i8*
  %28 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %29 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %28, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = bitcast i32* %30 to i8*
  call void @MAYALIAS(i8* %27, i8* %31)
  %32 = getelementptr inbounds [2 x i32*], [2 x i32*]* %3, i64 0, i64 0
  %33 = load i32*, i32** %32, align 16
  %34 = bitcast i32* %33 to i8*
  %35 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %36 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %35, i32 0, i32 1
  %37 = load i32*, i32** %36, align 8
  %38 = bitcast i32* %37 to i8*
  call void @MAYALIAS(i8* %34, i8* %38)
  %39 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 0
  %40 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %39, i32 0, i32 2
  %41 = load float*, float** %40, align 16
  %42 = bitcast float* %41 to i8*
  %43 = bitcast float* %9 to i8*
  call void @MAYALIAS(i8* %42, i8* %43)
  %44 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 0
  %45 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %44, i32 0, i32 0
  %46 = load i32*, i32** %45, align 16
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %49 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %48, i32 0, i32 1
  %50 = load i32*, i32** %49, align 8
  %51 = bitcast i32* %50 to i8*
  call void @NOALIAS(i8* %47, i8* %51)
  %52 = getelementptr inbounds [2 x i32*], [2 x i32*]* %3, i64 0, i64 1
  %53 = load i32*, i32** %52, align 8
  %54 = bitcast i32* %53 to i8*
  %55 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %56 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %55, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = bitcast i32* %57 to i8*
  call void @NOALIAS(i8* %54, i8* %58)
  %59 = load i32, i32* %4, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %0
  %62 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %63 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %62, i32 0, i32 0
  store i32* %6, i32** %63, align 8
  br label %64

64:                                               ; preds = %61, %0
  %65 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 0
  %66 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %65, i32 0, i32 0
  %67 = load i32*, i32** %66, align 16
  %68 = bitcast i32* %67 to i8*
  %69 = getelementptr inbounds [3 x %struct.MyStruct], [3 x %struct.MyStruct]* %2, i64 0, i64 1
  %70 = getelementptr inbounds %struct.MyStruct, %struct.MyStruct* %69, i32 0, i32 1
  %71 = load i32*, i32** %70, align 8
  %72 = bitcast i32* %71 to i8*
  call void @MAYALIAS(i8* %68, i8* %72)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)"}
