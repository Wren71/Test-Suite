; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/spec-gap.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/spec-gap.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.TypHeader = type { %struct.TypHeader** }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@HdFree = common dso_local global %struct.TypHeader* null, align 8
@FirstBag = common dso_local global %struct.TypHeader** null, align 8
@FreeHandle = common dso_local global %struct.TypHeader* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32, i8*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %3)
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %6 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 {
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SyGetmem(i64) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i8*, i8** %2, align 8
  ret i8* %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @IntComm() #0 {
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.TypHeader* @NewBag() #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.TypHeader**, align 8
  %3 = alloca %struct.TypHeader**, align 8
  %4 = alloca %struct.TypHeader**, align 8
  %5 = alloca %struct.TypHeader*, align 8
  %6 = load %struct.TypHeader*, %struct.TypHeader** @HdFree, align 8
  %7 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %6, i32 0, i32 0
  %8 = load %struct.TypHeader**, %struct.TypHeader*** %7, align 8
  %9 = load i64, i64* %1, align 8
  %10 = udiv i64 %9, 8
  %11 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %8, i64 %10
  %12 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %11, i64 -1
  store %struct.TypHeader** %12, %struct.TypHeader*** %2, align 8
  %13 = load %struct.TypHeader*, %struct.TypHeader** @HdFree, align 8
  %14 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %13, i32 0, i32 0
  %15 = load %struct.TypHeader**, %struct.TypHeader*** %14, align 8
  %16 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %15, i64 -1
  store %struct.TypHeader** %16, %struct.TypHeader*** %3, align 8
  %17 = load %struct.TypHeader**, %struct.TypHeader*** @FirstBag, align 8
  %18 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %17, i64 -1
  store %struct.TypHeader** %18, %struct.TypHeader*** %4, align 8
  br label %19

19:                                               ; preds = %23, %0
  %20 = load %struct.TypHeader**, %struct.TypHeader*** %4, align 8
  %21 = load %struct.TypHeader**, %struct.TypHeader*** %3, align 8
  %22 = icmp ule %struct.TypHeader** %20, %21
  br i1 %22, label %23, label %29

23:                                               ; preds = %19
  %24 = load %struct.TypHeader**, %struct.TypHeader*** %3, align 8
  %25 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %24, i32 -1
  store %struct.TypHeader** %25, %struct.TypHeader*** %3, align 8
  %26 = load %struct.TypHeader*, %struct.TypHeader** %24, align 8
  %27 = load %struct.TypHeader**, %struct.TypHeader*** %2, align 8
  %28 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %27, i32 -1
  store %struct.TypHeader** %28, %struct.TypHeader*** %2, align 8
  store %struct.TypHeader* %26, %struct.TypHeader** %27, align 8
  br label %19

29:                                               ; preds = %19
  %30 = load %struct.TypHeader**, %struct.TypHeader*** %3, align 8
  %31 = load %struct.TypHeader*, %struct.TypHeader** %30, align 8
  %32 = bitcast %struct.TypHeader* %31 to i8*
  call void @NOALIAS(i8* %32, i8* bitcast (void ()* @IntComm to i8*))
  %33 = load %struct.TypHeader*, %struct.TypHeader** @HdFree, align 8
  store %struct.TypHeader* %33, %struct.TypHeader** %5, align 8
  br label %34

34:                                               ; preds = %47, %29
  %35 = load %struct.TypHeader*, %struct.TypHeader** %5, align 8
  %36 = load %struct.TypHeader**, %struct.TypHeader*** @FirstBag, align 8
  %37 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %36, i64 -1
  %38 = bitcast %struct.TypHeader** %37 to %struct.TypHeader*
  %39 = icmp ult %struct.TypHeader* %35, %38
  br i1 %39, label %40, label %50

40:                                               ; preds = %34
  %41 = load i64, i64* %1, align 8
  %42 = udiv i64 %41, 8
  %43 = load %struct.TypHeader*, %struct.TypHeader** %5, align 8
  %44 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %43, i32 0, i32 0
  %45 = load %struct.TypHeader**, %struct.TypHeader*** %44, align 8
  %46 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %45, i64 %42
  store %struct.TypHeader** %46, %struct.TypHeader*** %44, align 8
  br label %47

47:                                               ; preds = %40
  %48 = load %struct.TypHeader*, %struct.TypHeader** %5, align 8
  %49 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %48, i32 1
  store %struct.TypHeader* %49, %struct.TypHeader** %5, align 8
  br label %34

50:                                               ; preds = %34
  %51 = load %struct.TypHeader*, %struct.TypHeader** @FreeHandle, align 8
  %52 = bitcast %struct.TypHeader* %51 to %struct.TypHeader**
  %53 = load %struct.TypHeader*, %struct.TypHeader** %5, align 8
  %54 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %53, i32 0, i32 0
  store %struct.TypHeader** %52, %struct.TypHeader*** %54, align 8
  %55 = load %struct.TypHeader*, %struct.TypHeader** %5, align 8
  store %struct.TypHeader* %55, %struct.TypHeader** @FreeHandle, align 8
  %56 = load %struct.TypHeader*, %struct.TypHeader** @FreeHandle, align 8
  ret %struct.TypHeader* %56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @InstIntFunc(void (...)*) #0 {
  %2 = alloca void (...)*, align 8
  %3 = alloca %struct.TypHeader*, align 8
  store void (...)* %0, void (...)** %2, align 8
  %4 = call %struct.TypHeader* @NewBag()
  store %struct.TypHeader* %4, %struct.TypHeader** %3, align 8
  %5 = load void (...)*, void (...)** %2, align 8
  %6 = load %struct.TypHeader*, %struct.TypHeader** %3, align 8
  %7 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %6, i32 0, i32 0
  %8 = load %struct.TypHeader**, %struct.TypHeader*** %7, align 8
  %9 = bitcast %struct.TypHeader** %8 to void (...)**
  store void (...)* %5, void (...)** %9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @InitGasman() #0 {
  %1 = alloca i64, align 8
  %2 = load i64, i64* %1, align 8
  %3 = call i8* @SyGetmem(i64 %2)
  %4 = bitcast i8* %3 to %struct.TypHeader*
  store %struct.TypHeader* %4, %struct.TypHeader** @HdFree, align 8
  %5 = load %struct.TypHeader*, %struct.TypHeader** @FreeHandle, align 8
  %6 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %5, i32 0, i32 0
  %7 = load %struct.TypHeader**, %struct.TypHeader*** %6, align 8
  %8 = bitcast %struct.TypHeader** %7 to %struct.TypHeader*
  store %struct.TypHeader* %8, %struct.TypHeader** @FreeHandle, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @InitGasman()
  call void @InstIntFunc(void (...)* bitcast (void ()* @IntComm to void (...)*))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)"}
