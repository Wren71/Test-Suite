; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc53.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc53.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.s_rr_node = type { i16, i16, i16, i16, i16, i16, i32, i32*, i16*, float, float }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@nx = common dso_local global i32 0, align 4
@ny = common dso_local global i32 0, align 4
@num_rr_nodes = common dso_local global i32 0, align 4
@rr_node = common dso_local global %struct.s_rr_node* null, align 8
@io_rat = common dso_local global i32 0, align 4
@pins_per_clb = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #3
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32, i8*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %3)
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %6 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 {
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @count_routing_transistors(i32, float, float) #0 {
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca float*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca float, align 4
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  store i32 %0, i32* %4, align 4
  store float %1, float* %5, align 4
  store float %2, float* %6, align 4
  store float 6.000000e+00, float* %28, align 4
  store float 0.000000e+00, float* %24, align 4
  store float 0.000000e+00, float* %25, align 4
  store i32 0, i32* %23, align 4
  %31 = call i8* @PLKMALLOC(i32 1)
  %32 = bitcast i8* %31 to i32*
  store i32* %32, i32** %7, align 8
  %33 = load i32, i32* @nx, align 4
  %34 = load i32, i32* @ny, align 4
  %35 = icmp sgt i32 %33, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %3
  %37 = load i32, i32* @nx, align 4
  br label %40

38:                                               ; preds = %3
  %39 = load i32, i32* @ny, align 4
  br label %40

40:                                               ; preds = %38, %36
  %41 = phi i32 [ %37, %36 ], [ %39, %38 ]
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %18, align 4
  %43 = call i8* @PLKMALLOC(i32 1)
  %44 = bitcast i8* %43 to i32*
  store i32* %44, i32** %8, align 8
  %45 = call i8* @PLKMALLOC(i32 1)
  %46 = bitcast i8* %45 to float*
  store float* %46, float** %9, align 8
  store i32 0, i32* %14, align 4
  br label %47

47:                                               ; preds = %193, %40
  %48 = load i32, i32* %14, align 4
  %49 = load i32, i32* @num_rr_nodes, align 4
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %51, label %196

51:                                               ; preds = %47
  %52 = load i32, i32* %12, align 4
  switch i32 %52, label %192 [
    i32 4, label %53
    i32 5, label %53
  ]

53:                                               ; preds = %51, %51
  store i32 0, i32* %16, align 4
  br label %54

54:                                               ; preds = %85, %53
  %55 = load i32, i32* %16, align 4
  %56 = load i32, i32* %17, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %88

58:                                               ; preds = %54
  %59 = load i32, i32* %13, align 4
  switch i32 %59, label %83 [
    i32 4, label %60
    i32 5, label %60
    i32 2, label %82
  ]

60:                                               ; preds = %58, %58
  %61 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %62 = load i32, i32* %14, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %61, i64 %63
  %65 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %64, i32 0, i32 8
  %66 = load i16*, i16** %65, align 8
  %67 = load i32, i32* %16, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %66, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  store i32 %71, i32* %19, align 4
  %72 = load i32, i32* %17, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %60
  br label %81

75:                                               ; preds = %60
  %76 = load i32, i32* %14, align 4
  %77 = load i32, i32* %15, align 4
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %75
  br label %80

80:                                               ; preds = %79, %75
  br label %81

81:                                               ; preds = %80, %74
  br label %84

82:                                               ; preds = %58
  br label %84

83:                                               ; preds = %58
  br label %207

84:                                               ; preds = %82, %81
  br label %85

85:                                               ; preds = %84
  %86 = load i32, i32* %16, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %16, align 4
  br label %54

88:                                               ; preds = %54
  %89 = load i32, i32* %12, align 4
  %90 = icmp eq i32 %89, 4
  br i1 %90, label %91, label %141

91:                                               ; preds = %88
  %92 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %93 = load i32, i32* %14, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %92, i64 %94
  %96 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %95, i32 0, i32 0
  %97 = load i16, i16* %96, align 8
  %98 = sext i16 %97 to i32
  %99 = sub nsw i32 %98, 1
  store i32 %99, i32* %20, align 4
  br label %100

100:                                              ; preds = %111, %91
  %101 = load i32, i32* %20, align 4
  %102 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %103 = load i32, i32* %14, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %102, i64 %104
  %106 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %105, i32 0, i32 1
  %107 = load i16, i16* %106, align 2
  %108 = sext i16 %107 to i32
  %109 = icmp sle i32 %101, %108
  br i1 %109, label %110, label %114

110:                                              ; preds = %100
  br label %111

111:                                              ; preds = %110
  %112 = load i32, i32* %20, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %20, align 4
  br label %100

114:                                              ; preds = %100
  %115 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %116 = load i32, i32* %14, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %115, i64 %117
  %119 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %118, i32 0, i32 0
  %120 = load i16, i16* %119, align 8
  %121 = sext i16 %120 to i32
  store i32 %121, i32* %20, align 4
  br label %122

122:                                              ; preds = %137, %114
  %123 = load i32, i32* %20, align 4
  %124 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %125 = load i32, i32* %14, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %124, i64 %126
  %128 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %127, i32 0, i32 1
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = icmp sle i32 %123, %130
  br i1 %131, label %132, label %140

132:                                              ; preds = %122
  %133 = load i32*, i32** %8, align 8
  %134 = load i32, i32* %20, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i32, i32* %133, i64 %135
  store i32 0, i32* %136, align 4
  br label %137

137:                                              ; preds = %132
  %138 = load i32, i32* %20, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %20, align 4
  br label %122

140:                                              ; preds = %122
  br label %191

141:                                              ; preds = %88
  %142 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %143 = load i32, i32* %14, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %142, i64 %144
  %146 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %145, i32 0, i32 2
  %147 = load i16, i16* %146, align 4
  %148 = sext i16 %147 to i32
  %149 = sub nsw i32 %148, 1
  store i32 %149, i32* %21, align 4
  br label %150

150:                                              ; preds = %161, %141
  %151 = load i32, i32* %21, align 4
  %152 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %153 = load i32, i32* %14, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %152, i64 %154
  %156 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %155, i32 0, i32 3
  %157 = load i16, i16* %156, align 2
  %158 = sext i16 %157 to i32
  %159 = icmp sle i32 %151, %158
  br i1 %159, label %160, label %164

160:                                              ; preds = %150
  br label %161

161:                                              ; preds = %160
  %162 = load i32, i32* %21, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %21, align 4
  br label %150

164:                                              ; preds = %150
  %165 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %166 = load i32, i32* %14, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %165, i64 %167
  %169 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %168, i32 0, i32 2
  %170 = load i16, i16* %169, align 4
  %171 = sext i16 %170 to i32
  store i32 %171, i32* %21, align 4
  br label %172

172:                                              ; preds = %187, %164
  %173 = load i32, i32* %21, align 4
  %174 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8
  %175 = load i32, i32* %14, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %174, i64 %176
  %178 = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %177, i32 0, i32 3
  %179 = load i16, i16* %178, align 2
  %180 = sext i16 %179 to i32
  %181 = icmp sle i32 %173, %180
  br i1 %181, label %182, label %190

182:                                              ; preds = %172
  %183 = load i32*, i32** %8, align 8
  %184 = load i32, i32* %21, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i32, i32* %183, i64 %185
  store i32 0, i32* %186, align 4
  br label %187

187:                                              ; preds = %182
  %188 = load i32, i32* %21, align 4
  %189 = add nsw i32 %188, 1
  store i32 %189, i32* %21, align 4
  br label %172

190:                                              ; preds = %172
  br label %191

191:                                              ; preds = %190, %140
  br label %192

192:                                              ; preds = %51, %191
  br label %193

193:                                              ; preds = %192
  %194 = load i32, i32* %14, align 4
  %195 = add nsw i32 %194, 1
  store i32 %195, i32* %14, align 4
  br label %47

196:                                              ; preds = %47
  %197 = load i32*, i32** %8, align 8
  %198 = bitcast i32* %197 to i8*
  call void @free(i8* %198) #3
  %199 = load float*, float** %9, align 8
  %200 = bitcast float* %199 to i8*
  call void @free(i8* %200) #3
  %201 = load float*, float** %10, align 8
  %202 = bitcast float* %201 to i8*
  call void @free(i8* %202) #3
  %203 = load float*, float** %11, align 8
  %204 = bitcast float* %203 to i8*
  call void @free(i8* %204) #3
  %205 = load i32*, i32** %7, align 8
  %206 = bitcast i32* %205 to i8*
  call void @free(i8* %206) #3
  br label %207

207:                                              ; preds = %196, %83
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  call void @count_routing_transistors(i32 1, float 1.000000e+00, float 1.000000e+00)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)"}
