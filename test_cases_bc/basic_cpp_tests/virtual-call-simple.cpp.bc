; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/basic_cpp_tests/virtual-call-simple.cpp'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_cpp_tests/virtual-call-simple.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%class.K = type { i32 (...)** }
%class.F = type { %class.K }

$_ZN1FC2Ev = comdat any

$_ZN1F8getinputEv = comdat any

$_ZN1F3fooEPPc = comdat any

$_ZN1KC2Ev = comdat any

$_ZN1K5faterEv = comdat any

$_ZTV1F = comdat any

$_ZTS1F = comdat any

$_ZTS1K = comdat any

$_ZTI1K = comdat any

$_ZTI1F = comdat any

$_ZTV1K = comdat any

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@_ZTV1F = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI1F to i8*), i8* bitcast (i8* (%class.K*)* @_ZN1K5faterEv to i8*)] }, comdat, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external dso_local global i8*
@_ZTS1F = linkonce_odr dso_local constant [3 x i8] c"1F\00", comdat, align 1
@_ZTVN10__cxxabiv117__class_type_infoE = external dso_local global i8*
@_ZTS1K = linkonce_odr dso_local constant [3 x i8] c"1K\00", comdat, align 1
@_ZTI1K = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1K, i32 0, i32 0) }, comdat, align 8
@_ZTI1F = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1F, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTI1K to i8*) }, comdat, align 8
@_ZTV1K = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTI1K to i8*), i8* bitcast (i8* (%class.K*)* @_ZN1K5faterEv to i8*)] }, comdat, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"fd\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"fdaf\00", align 1

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca %class.K*, align 8
  %2 = alloca %class.F, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = call i8* @_Znwm(i64 8) #5
  %8 = bitcast i8* %7 to %class.F*
  %9 = bitcast %class.F* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 8, i1 false)
  call void @_ZN1FC2Ev(%class.F* %8) #6
  %10 = bitcast %class.F* %8 to %class.K*
  store %class.K* %10, %class.K** %1, align 8
  call void @_ZN1FC2Ev(%class.F* %2) #6
  store i8** %3, i8*** %4, align 8
  %11 = call i8* @_ZN1F8getinputEv(%class.F* %2)
  store i8* %11, i8** %5, align 8
  %12 = load %class.K*, %class.K** %1, align 8
  %13 = bitcast %class.K* %12 to i8* (%class.K*)***
  %14 = load i8* (%class.K*)**, i8* (%class.K*)*** %13, align 8
  %15 = getelementptr inbounds i8* (%class.K*)*, i8* (%class.K*)** %14, i64 0
  %16 = load i8* (%class.K*)*, i8* (%class.K*)** %15, align 8
  %17 = call i8* %16(%class.K* %12)
  %18 = load i8*, i8** %5, align 8
  %19 = load i8**, i8*** %4, align 8
  store i8* %18, i8** %19, align 8
  %20 = load i8**, i8*** %4, align 8
  %21 = call i8* @_ZN1F3fooEPPc(%class.F* %2, i8** %20)
  store i8* %21, i8** %6, align 8
  %22 = load i8*, i8** %6, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %22)
  ret i32 0
}

; Function Attrs: nobuiltin
declare dso_local noalias i8* @_Znwm(i64) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1FC2Ev(%class.F*) unnamed_addr #3 comdat align 2 {
  %2 = alloca %class.F*, align 8
  store %class.F* %0, %class.F** %2, align 8
  %3 = load %class.F*, %class.F** %2, align 8
  %4 = bitcast %class.F* %3 to %class.K*
  call void @_ZN1KC2Ev(%class.K* %4) #6
  %5 = bitcast %class.F* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV1F, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i8* @_ZN1F8getinputEv(%class.F*) #3 comdat align 2 {
  %2 = alloca %class.F*, align 8
  store %class.F* %0, %class.F** %2, align 8
  %3 = load %class.F*, %class.F** %2, align 8
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i8* @_ZN1F3fooEPPc(%class.F*, i8**) #3 comdat align 2 {
  %3 = alloca %class.F*, align 8
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  store %class.F* %0, %class.F** %3, align 8
  store i8** %1, i8*** %4, align 8
  %6 = load %class.F*, %class.F** %3, align 8
  %7 = load i8**, i8*** %4, align 8
  %8 = load i8*, i8** %7, align 8
  store i8* %8, i8** %5, align 8
  %9 = load i8*, i8** %5, align 8
  ret i8* %9
}

declare dso_local i32 @printf(i8*, ...) #4

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1KC2Ev(%class.K*) unnamed_addr #3 comdat align 2 {
  %2 = alloca %class.K*, align 8
  store %class.K* %0, %class.K** %2, align 8
  %3 = load %class.K*, %class.K** %2, align 8
  %4 = bitcast %class.K* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV1K, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local i8* @_ZN1K5faterEv(%class.K*) unnamed_addr #3 comdat align 2 {
  %2 = alloca %class.K*, align 8
  store %class.K* %0, %class.K** %2, align 8
  %3 = load %class.K*, %class.K** %2, align 8
  ret i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)
}

attributes #0 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { builtin }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)"}
