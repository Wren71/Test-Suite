; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/basic_cpp_tests/diamond-inheritance.cpp'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_cpp_tests/diamond-inheritance.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%class.D = type { %class.B, %class.C }
%class.B = type { %class.A }
%class.A = type { i32 (...)** }
%class.C = type { %class.A }

$_ZN1DC2Ev = comdat any

$_ZN1BC2Ev = comdat any

$_ZN1CC2Ev = comdat any

$_ZN1B1fEPi = comdat any

$_ZN1C1fEPi = comdat any

$_ZN1AC2Ev = comdat any

$_ZN1A1fEPi = comdat any

$_ZTV1D = comdat any

$_ZTS1D = comdat any

$_ZTS1B = comdat any

$_ZTS1A = comdat any

$_ZTI1A = comdat any

$_ZTI1B = comdat any

$_ZTS1C = comdat any

$_ZTI1C = comdat any

$_ZTI1D = comdat any

$_ZTV1B = comdat any

$_ZTV1A = comdat any

$_ZTV1C = comdat any

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@global_obj_b = dso_local global i32 0, align 4
@global_ptr_b = dso_local global i32* @global_obj_b, align 8
@global_obj_c = dso_local global i32 0, align 4
@global_ptr_c = dso_local global i32* @global_obj_c, align 8
@_ZTV1D = linkonce_odr dso_local unnamed_addr constant { [3 x i8*], [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTI1D to i8*), i8* bitcast (void (%class.B*, i32*)* @_ZN1B1fEPi to i8*)], [3 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTI1D to i8*), i8* bitcast (void (%class.C*, i32*)* @_ZN1C1fEPi to i8*)] }, comdat, align 8
@_ZTVN10__cxxabiv121__vmi_class_type_infoE = external dso_local global i8*
@_ZTS1D = linkonce_odr dso_local constant [3 x i8] c"1D\00", comdat, align 1
@_ZTVN10__cxxabiv120__si_class_type_infoE = external dso_local global i8*
@_ZTS1B = linkonce_odr dso_local constant [3 x i8] c"1B\00", comdat, align 1
@_ZTVN10__cxxabiv117__class_type_infoE = external dso_local global i8*
@_ZTS1A = linkonce_odr dso_local constant [3 x i8] c"1A\00", comdat, align 1
@_ZTI1A = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1A, i32 0, i32 0) }, comdat, align 8
@_ZTI1B = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1B, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTI1A to i8*) }, comdat, align 8
@_ZTS1C = linkonce_odr dso_local constant [3 x i8] c"1C\00", comdat, align 1
@_ZTI1C = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1C, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTI1A to i8*) }, comdat, align 8
@_ZTI1D = linkonce_odr dso_local constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1D, i32 0, i32 0), i32 1, i32 2, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI1B to i8*), i64 2, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI1C to i8*), i64 2050 }, comdat, align 8
@_ZTV1B = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI1B to i8*), i8* bitcast (void (%class.B*, i32*)* @_ZN1B1fEPi to i8*)] }, comdat, align 8
@_ZTV1A = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTI1A to i8*), i8* bitcast (void (%class.A*, i32*)* @_ZN1A1fEPi to i8*)] }, comdat, align 8
@_ZTV1C = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI1C to i8*), i8* bitcast (void (%class.C*, i32*)* @_ZN1C1fEPi to i8*)] }, comdat, align 8

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z9MUSTALIASPvS_(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z12PARTIALALIASPvS_(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z8MAYALIASPvS_(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z7NOALIASPvS_(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z21EXPECTEDFAIL_MAYALIASPvS_(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z20EXPECTEDFAIL_NOALIASPvS_(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @_Z10SAFEMALLOCi(i32) #2 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #5
  ret i8* %5
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @_Z9PLKMALLOCi(i32) #2 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #5
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @_Z9NFRMALLOCi(i32) #2 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #5
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @_Z9CLKMALLOCi(i32) #2 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #5
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @_Z9NFRLEAKFPi(i32) #2 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #5
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @_Z9PLKLEAKFPi(i32) #2 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #5
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @_Z6LEAKFNi(i32) #2 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @malloc(i64 %4) #5
  ret i8* %5
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z9RC_ACCESSii(i32, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z10CXT_THREADiPc(i32, i8*) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z10TCT_ACCESSiPc(i32, i8*) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z15INTERLEV_ACCESSiPcS_(i32, i8*, i8*) #2 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z5PAUSEPc(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %3)
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %6 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z5derefv() #2 {
  ret void
}

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %class.D, align 8
  %5 = alloca %class.B*, align 8
  %6 = alloca %class.C*, align 8
  store i32 0, i32* %1, align 4
  store i32* @global_obj_b, i32** %2, align 8
  store i32* @global_obj_c, i32** %3, align 8
  call void @_ZN1DC2Ev(%class.D* %4) #5
  %7 = bitcast %class.D* %4 to %class.B*
  store %class.B* %7, %class.B** %5, align 8
  %8 = load %class.B*, %class.B** %5, align 8
  %9 = load i32*, i32** %2, align 8
  %10 = bitcast %class.B* %8 to void (%class.B*, i32*)***
  %11 = load void (%class.B*, i32*)**, void (%class.B*, i32*)*** %10, align 8
  %12 = getelementptr inbounds void (%class.B*, i32*)*, void (%class.B*, i32*)** %11, i64 0
  %13 = load void (%class.B*, i32*)*, void (%class.B*, i32*)** %12, align 8
  call void %13(%class.B* %8, i32* %9)
  %14 = icmp eq %class.D* %4, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %0
  %16 = bitcast %class.D* %4 to i8*
  %17 = getelementptr inbounds i8, i8* %16, i64 8
  %18 = bitcast i8* %17 to %class.C*
  br label %19

19:                                               ; preds = %15, %0
  %20 = phi %class.C* [ %18, %15 ], [ null, %0 ]
  store %class.C* %20, %class.C** %6, align 8
  %21 = load %class.C*, %class.C** %6, align 8
  %22 = load i32*, i32** %3, align 8
  %23 = bitcast %class.C* %21 to void (%class.C*, i32*)***
  %24 = load void (%class.C*, i32*)**, void (%class.C*, i32*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.C*, i32*)*, void (%class.C*, i32*)** %24, i64 0
  %26 = load void (%class.C*, i32*)*, void (%class.C*, i32*)** %25, align 8
  call void %26(%class.C* %21, i32* %22)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1DC2Ev(%class.D*) unnamed_addr #2 comdat align 2 {
  %2 = alloca %class.D*, align 8
  store %class.D* %0, %class.D** %2, align 8
  %3 = load %class.D*, %class.D** %2, align 8
  %4 = bitcast %class.D* %3 to %class.B*
  call void @_ZN1BC2Ev(%class.B* %4) #5
  %5 = bitcast %class.D* %3 to i8*
  %6 = getelementptr inbounds i8, i8* %5, i64 8
  %7 = bitcast i8* %6 to %class.C*
  call void @_ZN1CC2Ev(%class.C* %7) #5
  %8 = bitcast %class.D* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*], [3 x i8*] }, { [3 x i8*], [3 x i8*] }* @_ZTV1D, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = bitcast %class.D* %3 to i8*
  %10 = getelementptr inbounds i8, i8* %9, i64 8
  %11 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*], [3 x i8*] }, { [3 x i8*], [3 x i8*] }* @_ZTV1D, i32 0, inrange i32 1, i32 2) to i32 (...)**), i32 (...)*** %11, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1BC2Ev(%class.B*) unnamed_addr #2 comdat align 2 {
  %2 = alloca %class.B*, align 8
  store %class.B* %0, %class.B** %2, align 8
  %3 = load %class.B*, %class.B** %2, align 8
  %4 = bitcast %class.B* %3 to %class.A*
  call void @_ZN1AC2Ev(%class.A* %4) #5
  %5 = bitcast %class.B* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV1B, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1CC2Ev(%class.C*) unnamed_addr #2 comdat align 2 {
  %2 = alloca %class.C*, align 8
  store %class.C* %0, %class.C** %2, align 8
  %3 = load %class.C*, %class.C** %2, align 8
  %4 = bitcast %class.C* %3 to %class.A*
  call void @_ZN1AC2Ev(%class.A* %4) #5
  %5 = bitcast %class.C* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV1C, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

; Function Attrs: noinline optnone uwtable
define linkonce_odr dso_local void @_ZN1B1fEPi(%class.B*, i32*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.B*, align 8
  %4 = alloca i32*, align 8
  store %class.B* %0, %class.B** %3, align 8
  store i32* %1, i32** %4, align 8
  %5 = load %class.B*, %class.B** %3, align 8
  %6 = load i32*, i32** @global_ptr_b, align 8
  %7 = bitcast i32* %6 to i8*
  %8 = load i32*, i32** %4, align 8
  %9 = bitcast i32* %8 to i8*
  call void @_Z9MUSTALIASPvS_(i8* %7, i8* %9)
  %10 = load i32*, i32** @global_ptr_c, align 8
  %11 = bitcast i32* %10 to i8*
  %12 = load i32*, i32** %4, align 8
  %13 = bitcast i32* %12 to i8*
  call void @_Z9MUSTALIASPvS_(i8* %11, i8* %13)
  ret void
}

; Function Attrs: noinline optnone uwtable
define linkonce_odr dso_local void @_ZN1C1fEPi(%class.C*, i32*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.C*, align 8
  %4 = alloca i32*, align 8
  store %class.C* %0, %class.C** %3, align 8
  store i32* %1, i32** %4, align 8
  %5 = load %class.C*, %class.C** %3, align 8
  %6 = load i32*, i32** @global_ptr_b, align 8
  %7 = bitcast i32* %6 to i8*
  %8 = load i32*, i32** %4, align 8
  %9 = bitcast i32* %8 to i8*
  call void @_Z9MUSTALIASPvS_(i8* %7, i8* %9)
  %10 = load i32*, i32** @global_ptr_c, align 8
  %11 = bitcast i32* %10 to i8*
  %12 = load i32*, i32** %4, align 8
  %13 = bitcast i32* %12 to i8*
  call void @_Z9MUSTALIASPvS_(i8* %11, i8* %13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1AC2Ev(%class.A*) unnamed_addr #2 comdat align 2 {
  %2 = alloca %class.A*, align 8
  store %class.A* %0, %class.A** %2, align 8
  %3 = load %class.A*, %class.A** %2, align 8
  %4 = bitcast %class.A* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV1A, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8
  ret void
}

; Function Attrs: noinline optnone uwtable
define linkonce_odr dso_local void @_ZN1A1fEPi(%class.A*, i32*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %class.A*, align 8
  %4 = alloca i32*, align 8
  store %class.A* %0, %class.A** %3, align 8
  store i32* %1, i32** %4, align 8
  %5 = load %class.A*, %class.A** %3, align 8
  %6 = load i32*, i32** @global_ptr_b, align 8
  %7 = bitcast i32* %6 to i8*
  %8 = load i32*, i32** %4, align 8
  %9 = bitcast i32* %8 to i8*
  call void @_Z7NOALIASPvS_(i8* %7, i8* %9)
  %10 = load i32*, i32** @global_ptr_c, align 8
  %11 = bitcast i32* %10 to i8*
  %12 = load i32*, i32** %4, align 8
  %13 = bitcast i32* %12 to i8*
  call void @_Z7NOALIASPvS_(i8* %11, i8* %13)
  ret void
}

attributes #0 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)"}
